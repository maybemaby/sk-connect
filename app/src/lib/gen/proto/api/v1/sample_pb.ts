// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/api/v1/sample.proto (package proto.api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.api.v1.SampleRequest
 */
export class SampleRequest extends Message<SampleRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<SampleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.api.v1.SampleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SampleRequest {
    return new SampleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SampleRequest {
    return new SampleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SampleRequest {
    return new SampleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SampleRequest | PlainMessage<SampleRequest> | undefined, b: SampleRequest | PlainMessage<SampleRequest> | undefined): boolean {
    return proto3.util.equals(SampleRequest, a, b);
  }
}

/**
 * @generated from message proto.api.v1.SampleResponse
 */
export class SampleResponse extends Message<SampleResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<SampleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.api.v1.SampleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SampleResponse {
    return new SampleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SampleResponse {
    return new SampleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SampleResponse {
    return new SampleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SampleResponse | PlainMessage<SampleResponse> | undefined, b: SampleResponse | PlainMessage<SampleResponse> | undefined): boolean {
    return proto3.util.equals(SampleResponse, a, b);
  }
}

