// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/api/v1/sample.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/maybemaby/sk-connect/gen/proto/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SampleServiceName is the fully-qualified name of the SampleService service.
	SampleServiceName = "proto.api.v1.SampleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SampleServiceSampleMethodProcedure is the fully-qualified name of the SampleService's
	// SampleMethod RPC.
	SampleServiceSampleMethodProcedure = "/proto.api.v1.SampleService/SampleMethod"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sampleServiceServiceDescriptor            = v1.File_proto_api_v1_sample_proto.Services().ByName("SampleService")
	sampleServiceSampleMethodMethodDescriptor = sampleServiceServiceDescriptor.Methods().ByName("SampleMethod")
)

// SampleServiceClient is a client for the proto.api.v1.SampleService service.
type SampleServiceClient interface {
	SampleMethod(context.Context, *connect.Request[v1.SampleRequest]) (*connect.Response[v1.SampleResponse], error)
}

// NewSampleServiceClient constructs a client for the proto.api.v1.SampleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSampleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SampleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sampleServiceClient{
		sampleMethod: connect.NewClient[v1.SampleRequest, v1.SampleResponse](
			httpClient,
			baseURL+SampleServiceSampleMethodProcedure,
			connect.WithSchema(sampleServiceSampleMethodMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sampleServiceClient implements SampleServiceClient.
type sampleServiceClient struct {
	sampleMethod *connect.Client[v1.SampleRequest, v1.SampleResponse]
}

// SampleMethod calls proto.api.v1.SampleService.SampleMethod.
func (c *sampleServiceClient) SampleMethod(ctx context.Context, req *connect.Request[v1.SampleRequest]) (*connect.Response[v1.SampleResponse], error) {
	return c.sampleMethod.CallUnary(ctx, req)
}

// SampleServiceHandler is an implementation of the proto.api.v1.SampleService service.
type SampleServiceHandler interface {
	SampleMethod(context.Context, *connect.Request[v1.SampleRequest]) (*connect.Response[v1.SampleResponse], error)
}

// NewSampleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSampleServiceHandler(svc SampleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sampleServiceSampleMethodHandler := connect.NewUnaryHandler(
		SampleServiceSampleMethodProcedure,
		svc.SampleMethod,
		connect.WithSchema(sampleServiceSampleMethodMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.api.v1.SampleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SampleServiceSampleMethodProcedure:
			sampleServiceSampleMethodHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSampleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSampleServiceHandler struct{}

func (UnimplementedSampleServiceHandler) SampleMethod(context.Context, *connect.Request[v1.SampleRequest]) (*connect.Response[v1.SampleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.api.v1.SampleService.SampleMethod is not implemented"))
}
